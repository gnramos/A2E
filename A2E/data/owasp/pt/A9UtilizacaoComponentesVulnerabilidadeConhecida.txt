Específico da Aplicação
Exploração
MÉDIO
Prevalência
GENERALIZADA
Detecção
DIFÍCIL
Impacto
MODERADO
Agentes de Ameaça
Específico do Negócio / Aplicação
Alguns componentes vulneráveis (por exemplo, bibliotecas de framework) podem ser identificadas e exploradas com ferramen-tas automatizadas, expan-dindo o leque de agentes de ameaça incluindo, além de atacantes direcionados, atores caóticos.
O atacante identifica um componente vulnerável através de varredura ou análise manual. Ele personaliza o exploit conforme necessário e executa o ataque. Isso se torna mais difícil se o com-ponente usado está mais profundo na aplicação.
Virtualmente todas aplicações possuem estes problemas porque a maioria dos times de desenvolvimento não focam em garantir que seus componentes e/ou bibliotecas estejam atualizados. Em muitos casos, os desenvolvedores sequer conhecem todos os componentes que estão usando, muito menos suas versões. Dependências de componentes tornam a situação ainda pior.
A gama completa de vulnerabilidades é possível, incluindo injeção, falha no controle de acesso, XSS, etc. O impacto poderia variar do mínimo ao completo comprometimento do servidor e dos dados.
Considere o que cada vulnerabilidade pode significar para o negócio controlado pela aplicação afetada. Ela pode ser trivial ou pode significar o comprometimento completo.
Exemplo de Cenários de Ataque Vulnerabilidades de componentes podem causar quase qualquer tipo de risco imaginável, variando do malware trivial ao sofisticado desenvolvido para atingir uma organização específica. Componentes quase sempre executam com todos os privilégios de uma aplicação, então falhas em qualquer componente podem ser sérias. Os dois seguintes componentes vulneráveis foram baixados 22m de vezes em 2011.
•Apache CXF Authentication Bypass – Ao não fornecer um token de identidade, atacantes podem chamar qualquer serviço web com todas as permissões. (Apache CXF é um framework de serviços, não deve ser confundido com o Servidor de Aplicação Apache.)
•Spring Remote Code Execution – Abuso da implementação de Linguagem Expression no Spring permitiu aos atacantes executarem código arbitrário, efetivamente comprometendo o servidor. Toda aplicação utilizando qualquer dessas bibliotecas vulneráveis está vulnerável a ataques já que ambos componentes são diretamente acessíveis por usuários da aplicação. Outras bibliotecas vulneráveis, usadas mais profundamente em uma aplicação, podem ser mais difíceis de explorar.
Estou vulnerável?
Em teoria, deveria ser fácil de descobrir se você está atualmente utilizando quaisquer componentes ou bibliotecas vulneráveis. Infelizmente, relatórios de vulnerabilidades de software comercial ou livre nem sempre especificam exatamente quais versões de um componente estão vulneráveis de uma forma padrão, pesquisável. Além disso, nem todas as bibliotecas utilizam um sistema de numeração de versões compreensível. Pior ainda, nem todas as vulnerabilidades são reportadas para um local central que seja fácil de pesquisar, apesar de sites como CVE e NVD estejam se tornando mais fáceis de pesquisar.
Determinar se você está vulnerável requer pesquisar nesses bancos de dados, bem como manter-se a par de listas de e-mails e anúncios para qualquer coisa que possa ser uma vulnerabilidade. Se um de seus componentes tiver uma vulnerabilidade, você deve avaliar cuidadosamente se está realmente vulnerável verificando se seu código utiliza a parte do componente com a vulnerabilidade e se a falha poderia resultar em um impacto que preocupe você.
Referências OWASP
• Good Component Practices Project Externas
• The Unfortunate Reality of Insecure Libraries
• Open Source Software Security
• Addressing Security Concerns in Open Source Components
• MITRE Common Vulnerabilities and Exposures
• Example Mass Assignment Vulnerability that was fixed in ActiveRecord, a Ruby on Rails GEM
Como faço para evitar? Uma opção é não usar componentes que você não escreve. Mas isso não é muito realista. Muitos projetos de componentes não criam correções de vulnerabilidades para versões antigas. Em vez disso, é mais simples corrigir o problema na próxima versão. Então atualizar para essas novas versões é crítico. Projetos de software devem ter processos para:
1)Identificar todos os componentes e as versões que você está utili-zando, incluindo todas as dependências. (ex., versões dos plugins).
2)Monitorar a segurança desses componentes em banco de dados públicos, listas de e-mail de projetos e segurança, e mantê-los atualizados.
3)Estabelecer políticas de segurança que definam o uso do componente, assim como exigir certas práticas de desenvolvimento de software, passando em testes de segurança, e licenças aceitáveis.
4)Quando apropriado, considere a adição de invólucros de segu-rança em torno dos componentes para desabilitar funcionalidades não utilizadas e/ou proteger falhas ou aspectos vulneráveis do componente.
A9
Utilização de Componentes Vulneráveis Conhecidos