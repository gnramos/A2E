Específico da Aplicação
Exploração
MÉDIA
Prevalência
RARA
Detecção
FÁCIL
Impacto
MODERADO
Agentes de Ameaça
Específico do Negócio / Aplicação
Considere quem possa enganar seus usuários para que enviem uma solicitação ao seu site. Qualquer site ou feed HTML que seus usuários utilizam poderia fazer isso.
O atacante aponta para um redirecionamento inválido e engana as vítimas para que cliquem nele. As vítimas são mais propensas a clicar, já que o link aponta para um site válido. O atacante visa um encaminhamen-to inseguro para evitar verificações de segurança.
Aplicações frequentemente redirecionam usuários para outras páginas, ou usam encaminhamentos internos de uma maneira similar. Por vezes a página de destino é especificada através de um parâmetro que não é validado, permitindo que o atacante escolha essa página de destino.
Detectar redirecionamentos inválidos é fácil. Procure por aqueles onde você pode definir a URL completa. Encaminhamen-tos inválidos são mais difíceis, pois eles têm como alvo páginas internas.
Tais redirecionamentos podem tentar instalar malware ou enganar vítimas para que divulguem suas senhas ou outras informações sensíveis. Encaminhamentos inseguros podem permitir contornar os controles de acesso.
Considere o valor de negócio da manutenção da confiança de seus.
E se eles forem infectados por malware?
E se atacantes puderem acessar funções que deveriam ser somente internas?
Exemplos de Cenários de Ataque Cenário #1: A aplicação possui uma página chamada “redirect.jsp” que recebe apenas um parâmetro “url”. O atacante cria uma URL maliciousa que redireciona os usuários para o site malicioso, que executa phishing e instala malware. http://www.example.com/redirect.jsp?url=evil.com Cenário #2: A aplicação usa encaminhamentos para rotear requisições entre partes diferentes do site. Para facilitar, algumas páginas usam um parâmetro para indicar onde o usuário deve ser enviado se a transação for efetuada com sucesso. Neste caso, o atacante cria uma URL que irá passar pela verificação de controle de acesso e encaminhá-lo para uma funcionalidade administrativa que o atacante não teria autorização para acessá-la. http://www.example.com/boring.jsp?fwd=admin.jsp
Estou vulnerável? A melhor forma de verificar se uma aplicação possui redirecionamentos ou encaminhamentos não validados é:
1.Revise o código de todos os usos de redirecionamentos ou encaminhamentos (chamados de transferência em .NET). Para cada uso, identifique se a URL de destino está incluída em quaisquer valores de parâmetro. Caso a URL de destino não seja validada em uma lista branca, você está vulnerável.
2.Também, varra o site para verificar se ele gera algum redirecionamento (códigos de resposta HTTP 300-307, tipicamente 302). Olhe para os parâmetros fornecidos antes do redirecionamento para verificar se eles parecem ser uma URL de destino ou apenas parte dela. Se sim, altere a URL de destino e observe se o site redireciona para o novo destino.
3.Se o código não estiver disponível, verifica todos os parâmetros para identificar se eles parecem ser parte de um redirecionamento ou encaminhamento e teste todos.
Referências OWASP
• OWASP Article on Open Redirects
• ESAPI SecurityWrapperResponse sendRedirect() method Externas
• CWE Entry 601 on Open Redirects
• WASC Article on URL Redirector Abuse
• Google blog article on the dangers of open redirects
• OWASP Top 10 for .NET article on Unvalidated Redirects and Forwards
Como faço para evitar? Uso seguro de redirecionamentos e encaminhamentos pode ser feito de várias formas:
1.Simplesmente evitar usá-los.
2.Se forem usados, não envolva parâmetros do usuário no cálculo do destino. Normalmente, isto pode ser feito.
3.Se os parâmetros de destino não podem ser evitados, tenha certeza que o valor fornecido é válido, e autorizado para o usuário. Recomenda-se que qualquer parâmetro de destino seja um valor mapeado, e não a URL real ou parte dela, e que o código do lado do servidor traduza este mapeamento para a URL de destino. Aplicações podem usar ESAPI para substituir o método sendRedirect() para certificarem-se de que todos os destinos do redirecionamento são seguros. Evitar tais falhas é extremamente importante já que elas são o alvo favorito de phishers tentando obter a confiança do usuário.
A10
Redirecionamentos e Encaminhamentos Inválidos